"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6636],{52724:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=n(74848),r=n(28453);const t={sidebar_position:1,tags:["user-svc","permissions","roles","authentication","authorization"]},o="User Svc",a={id:"services/user-svc",title:"User Svc",description:"The user service is at the heart of Singulatron, managing users, tokens, organizations, permissions and more. Each service and human on the Singulatron network has an account in the User Svc.",source:"@site/docs/services/user-svc.md",sourceDirName:"services",slug:"/services/user-svc",permalink:"/docs/services/user-svc",draft:!1,unlisted:!1,editUrl:"https://github.com/singulatron/singulatron/tree/main/docs-source/docs/services/user-svc.md",tags:[{inline:!0,label:"user-svc",permalink:"/docs/tags/user-svc"},{inline:!0,label:"permissions",permalink:"/docs/tags/permissions"},{inline:!0,label:"roles",permalink:"/docs/tags/roles"},{inline:!0,label:"authentication",permalink:"/docs/tags/authentication"},{inline:!0,label:"authorization",permalink:"/docs/tags/authorization"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["user-svc","permissions","roles","authentication","authorization"]},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/docs/category/services"},next:{title:"Policy Svc",permalink:"/docs/services/policy-svc"}},c={},l=[{value:"Writing Your First Service",id:"writing-your-first-service",level:2},{value:"Managing Credentials",id:"managing-credentials",level:3},{value:"Roles",id:"roles",level:2},{value:"Types of Roles",id:"types-of-roles",level:3},{value:"Static",id:"static",level:3},{value:"Dynamic",id:"dynamic",level:4},{value:"Conventions",id:"conventions",level:3},{value:"Permissions",id:"permissions",level:2},{value:"Conventions",id:"conventions-1",level:3}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"user-svc",children:"User Svc"}),"\n",(0,i.jsxs)(s.p,{children:["The user service is at the heart of Singulatron, managing users, tokens, organizations, permissions and more. Each service and human on the Singulatron network has an account in the ",(0,i.jsx)(s.code,{children:"User Svc"}),"."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["This page is a high level overview of the ",(0,i.jsx)(s.code,{children:"User Svc"}),". For API documentation, please see the ",(0,i.jsx)(s.a,{href:"/docs/singulatron/login",children:"API documentation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"writing-your-first-service",children:"Writing Your First Service"}),"\n",(0,i.jsx)(s.p,{children:"Each service must register an account with the User Svc."}),"\n",(0,i.jsx)(s.h3,{id:"managing-credentials",children:"Managing Credentials"}),"\n",(0,i.jsx)(s.p,{children:"The first concept to understand is that service (machine) and user (human) accounts look and function the same."}),"\n",(0,i.jsxs)(s.p,{children:["Every service you write needs to ",(0,i.jsx)(s.a,{href:"/docs/singulatron/register",children:"register"})," at startup, or log in with the credentials it saves and manages if it's already regsitered. Just like a human."]}),"\n",(0,i.jsx)(s.p,{children:"You can do this in a few ways:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Use the ",(0,i.jsx)(s.a,{href:"/docs/singulatron/register",children:"API"})," directly"]}),"\n",(0,i.jsxs)(s.li,{children:["Use a language specific ",(0,i.jsx)(s.a,{href:"https://github.com/singulatron/singulatron/tree/main/clients",children:"client"})," that was generated from the API"]}),"\n",(0,i.jsxs)(s.li,{children:["Use a language specific ",(0,i.jsx)(s.a,{href:"https://github.com/singulatron/singulatron/tree/main/localtron/sdk",children:"SDK"})]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"roles",children:"Roles"}),"\n",(0,i.jsx)(s.h3,{id:"types-of-roles",children:"Types of Roles"}),"\n",(0,i.jsx)(s.h3,{id:"static",children:"Static"}),"\n",(0,i.jsxs)(s.p,{children:["Static roles, such as ",(0,i.jsx)(s.code,{children:"user-svc:admin"})," and ",(0,i.jsx)(s.code,{children:"user-svc:user"})," defined by the ",(0,i.jsx)(s.code,{children:"User Svc"})," are primarily used for simple role-based access control: in the Singulatron UI and API you can edit static roles to add or remove endpoints a user can call."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["If you are looking at restricting access to endpoints in other ways, you might be interested in: ",(0,i.jsx)(s.a,{href:"/docs/services/policy-svc",children:"Policy Svc"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"dynamic",children:"Dynamic"}),"\n",(0,i.jsx)(s.p,{children:"Dynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles."}),"\n",(0,i.jsxs)(s.p,{children:["Dynamic roles look like ",(0,i.jsx)(s.code,{children:"user-svc:org:{org_dBZRCej3fo}:admin"}),". The dynamic values must be surrounded by ",(0,i.jsx)(s.code,{children:"{}"})," symbols. The above example is how organization roles are represented."]}),"\n",(0,i.jsx)(s.p,{children:"These dynamic roles, like static roles are stored in the JWT tokens so it is advisable to keep them to a minimum. The organization example is an apt one here: think about how many GitHub or Google organizations you are part of. Likely even a few dozen are at the most extreme upper limit."}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"JWT tokens (and the dynamic they contain) are sent with each request, so try to be efficient with dynamic roles."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"conventions",children:"Conventions"}),"\n",(0,i.jsx)(s.p,{children:"Each role created must by prefixed by the slug of the account that created it. Said account becomes the owner of the role and only that account can edit the role."}),"\n",(0,i.jsx)(s.h2,{id:"permissions",children:"Permissions"}),"\n",(0,i.jsx)(s.h3,{id:"conventions-1",children:"Conventions"}),"\n",(0,i.jsx)(s.p,{children:"Each permission created must by prefixed by the slug of the account that created it. Said account becomes the owner of the permission and only that account can add the permission to a role."}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Once you own a permission (by creating it, and it being prefixed by your account slug), you can add it to any role, not just roles owned by you."}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Example; let's say your service is ",(0,i.jsx)(s.code,{children:"petstore-svc"}),". Singulatron prefers fine-grained access control, so you are free to define your own permissions, such as ",(0,i.jsx)(s.code,{children:"petstore-svc:read"})," or ",(0,i.jsx)(s.code,{children:"petstore-svc:pet:read"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);