// Code generated by MockGen. DO NOT EDIT.
// Source: ../sdk/go/client_interface.go
//
// Generated by this command:
//
//	mockgen -source=../sdk/go/client_interface.go -destination=../sdk/go/mock_client_interface.go -package=sdk
//

// Package sdk is a generated GoMock package.
package sdk

import (
	reflect "reflect"

	openapi "github.com/singulatron/superplatform/clients/go"
	gomock "go.uber.org/mock/gomock"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockClientFactory) Client(opts ...ClientOption) *openapi.APIClient {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Client", varargs...)
	ret0, _ := ret[0].(*openapi.APIClient)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientFactoryMockRecorder) Client(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClientFactory)(nil).Client), opts...)
}
