/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreIntersectsMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreIntersectsMatch{}

// DatastoreIntersectsMatch struct for DatastoreIntersectsMatch
type DatastoreIntersectsMatch struct {
	Selector *DatastoreFieldSelector `json:"selector,omitempty"`
	Values []map[string]interface{} `json:"values,omitempty"`
}

// NewDatastoreIntersectsMatch instantiates a new DatastoreIntersectsMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreIntersectsMatch() *DatastoreIntersectsMatch {
	this := DatastoreIntersectsMatch{}
	return &this
}

// NewDatastoreIntersectsMatchWithDefaults instantiates a new DatastoreIntersectsMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreIntersectsMatchWithDefaults() *DatastoreIntersectsMatch {
	this := DatastoreIntersectsMatch{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *DatastoreIntersectsMatch) GetSelector() DatastoreFieldSelector {
	if o == nil || IsNil(o.Selector) {
		var ret DatastoreFieldSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreIntersectsMatch) GetSelectorOk() (*DatastoreFieldSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *DatastoreIntersectsMatch) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given DatastoreFieldSelector and assigns it to the Selector field.
func (o *DatastoreIntersectsMatch) SetSelector(v DatastoreFieldSelector) {
	o.Selector = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *DatastoreIntersectsMatch) GetValues() []map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreIntersectsMatch) GetValuesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *DatastoreIntersectsMatch) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []map[string]interface{} and assigns it to the Values field.
func (o *DatastoreIntersectsMatch) SetValues(v []map[string]interface{}) {
	o.Values = v
}

func (o DatastoreIntersectsMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreIntersectsMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableDatastoreIntersectsMatch struct {
	value *DatastoreIntersectsMatch
	isSet bool
}

func (v NullableDatastoreIntersectsMatch) Get() *DatastoreIntersectsMatch {
	return v.value
}

func (v *NullableDatastoreIntersectsMatch) Set(val *DatastoreIntersectsMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreIntersectsMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreIntersectsMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreIntersectsMatch(val *DatastoreIntersectsMatch) *NullableDatastoreIntersectsMatch {
	return &NullableDatastoreIntersectsMatch{value: val, isSet: true}
}

func (v NullableDatastoreIntersectsMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreIntersectsMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


