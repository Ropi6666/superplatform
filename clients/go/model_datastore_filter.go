/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreFilter{}

// DatastoreFilter struct for DatastoreFilter
type DatastoreFilter struct {
	// All condition returns all objects.
	All map[string]interface{} `json:"all,omitempty"`
	// Contains condition returns all objects where the field(s) values contain a particular string or slice element.
	Contains *DatastoreContainsMatch `json:"contains,omitempty"`
	// Equals condition returns objects where value of a field equals (=) to the specified value in the query.
	Equal *DatastoreEqualsMatch `json:"equal,omitempty"`
	// Intersects condition returns objects where the slice value of a field intersects with the slice value in the query.
	Intersects *DatastoreIntersectsMatch `json:"intersects,omitempty"`
	Selector *DatastoreFieldSelector `json:"selector,omitempty"`
	// StartsWith condition returns all objects where the field(s) values start with a particular string.
	StartsWith *DatastoreStartsWithMatch `json:"startsWith,omitempty"`
}

// NewDatastoreFilter instantiates a new DatastoreFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreFilter() *DatastoreFilter {
	this := DatastoreFilter{}
	return &this
}

// NewDatastoreFilterWithDefaults instantiates a new DatastoreFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreFilterWithDefaults() *DatastoreFilter {
	this := DatastoreFilter{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *DatastoreFilter) GetAll() map[string]interface{} {
	if o == nil || IsNil(o.All) {
		var ret map[string]interface{}
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetAllOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.All) {
		return map[string]interface{}{}, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *DatastoreFilter) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given map[string]interface{} and assigns it to the All field.
func (o *DatastoreFilter) SetAll(v map[string]interface{}) {
	o.All = v
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *DatastoreFilter) GetContains() DatastoreContainsMatch {
	if o == nil || IsNil(o.Contains) {
		var ret DatastoreContainsMatch
		return ret
	}
	return *o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetContainsOk() (*DatastoreContainsMatch, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *DatastoreFilter) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given DatastoreContainsMatch and assigns it to the Contains field.
func (o *DatastoreFilter) SetContains(v DatastoreContainsMatch) {
	o.Contains = &v
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *DatastoreFilter) GetEqual() DatastoreEqualsMatch {
	if o == nil || IsNil(o.Equal) {
		var ret DatastoreEqualsMatch
		return ret
	}
	return *o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetEqualOk() (*DatastoreEqualsMatch, bool) {
	if o == nil || IsNil(o.Equal) {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *DatastoreFilter) HasEqual() bool {
	if o != nil && !IsNil(o.Equal) {
		return true
	}

	return false
}

// SetEqual gets a reference to the given DatastoreEqualsMatch and assigns it to the Equal field.
func (o *DatastoreFilter) SetEqual(v DatastoreEqualsMatch) {
	o.Equal = &v
}

// GetIntersects returns the Intersects field value if set, zero value otherwise.
func (o *DatastoreFilter) GetIntersects() DatastoreIntersectsMatch {
	if o == nil || IsNil(o.Intersects) {
		var ret DatastoreIntersectsMatch
		return ret
	}
	return *o.Intersects
}

// GetIntersectsOk returns a tuple with the Intersects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetIntersectsOk() (*DatastoreIntersectsMatch, bool) {
	if o == nil || IsNil(o.Intersects) {
		return nil, false
	}
	return o.Intersects, true
}

// HasIntersects returns a boolean if a field has been set.
func (o *DatastoreFilter) HasIntersects() bool {
	if o != nil && !IsNil(o.Intersects) {
		return true
	}

	return false
}

// SetIntersects gets a reference to the given DatastoreIntersectsMatch and assigns it to the Intersects field.
func (o *DatastoreFilter) SetIntersects(v DatastoreIntersectsMatch) {
	o.Intersects = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *DatastoreFilter) GetSelector() DatastoreFieldSelector {
	if o == nil || IsNil(o.Selector) {
		var ret DatastoreFieldSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetSelectorOk() (*DatastoreFieldSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *DatastoreFilter) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given DatastoreFieldSelector and assigns it to the Selector field.
func (o *DatastoreFilter) SetSelector(v DatastoreFieldSelector) {
	o.Selector = &v
}

// GetStartsWith returns the StartsWith field value if set, zero value otherwise.
func (o *DatastoreFilter) GetStartsWith() DatastoreStartsWithMatch {
	if o == nil || IsNil(o.StartsWith) {
		var ret DatastoreStartsWithMatch
		return ret
	}
	return *o.StartsWith
}

// GetStartsWithOk returns a tuple with the StartsWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreFilter) GetStartsWithOk() (*DatastoreStartsWithMatch, bool) {
	if o == nil || IsNil(o.StartsWith) {
		return nil, false
	}
	return o.StartsWith, true
}

// HasStartsWith returns a boolean if a field has been set.
func (o *DatastoreFilter) HasStartsWith() bool {
	if o != nil && !IsNil(o.StartsWith) {
		return true
	}

	return false
}

// SetStartsWith gets a reference to the given DatastoreStartsWithMatch and assigns it to the StartsWith field.
func (o *DatastoreFilter) SetStartsWith(v DatastoreStartsWithMatch) {
	o.StartsWith = &v
}

func (o DatastoreFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	if !IsNil(o.Equal) {
		toSerialize["equal"] = o.Equal
	}
	if !IsNil(o.Intersects) {
		toSerialize["intersects"] = o.Intersects
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.StartsWith) {
		toSerialize["startsWith"] = o.StartsWith
	}
	return toSerialize, nil
}

type NullableDatastoreFilter struct {
	value *DatastoreFilter
	isSet bool
}

func (v NullableDatastoreFilter) Get() *DatastoreFilter {
	return v.value
}

func (v *NullableDatastoreFilter) Set(val *DatastoreFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreFilter(val *DatastoreFilter) *NullableDatastoreFilter {
	return &NullableDatastoreFilter{value: val, isSet: true}
}

func (v NullableDatastoreFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


