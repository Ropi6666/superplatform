/*
Singulatron

AI management and development platform.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreEqualsMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreEqualsMatch{}

// DatastoreEqualsMatch struct for DatastoreEqualsMatch
type DatastoreEqualsMatch struct {
	// Selector selects one, more or all fields
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewDatastoreEqualsMatch instantiates a new DatastoreEqualsMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreEqualsMatch() *DatastoreEqualsMatch {
	this := DatastoreEqualsMatch{}
	return &this
}

// NewDatastoreEqualsMatchWithDefaults instantiates a new DatastoreEqualsMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreEqualsMatchWithDefaults() *DatastoreEqualsMatch {
	this := DatastoreEqualsMatch{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DatastoreEqualsMatch) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreEqualsMatch) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DatastoreEqualsMatch) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *DatastoreEqualsMatch) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o DatastoreEqualsMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreEqualsMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDatastoreEqualsMatch struct {
	value *DatastoreEqualsMatch
	isSet bool
}

func (v NullableDatastoreEqualsMatch) Get() *DatastoreEqualsMatch {
	return v.value
}

func (v *NullableDatastoreEqualsMatch) Set(val *DatastoreEqualsMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreEqualsMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreEqualsMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreEqualsMatch(val *DatastoreEqualsMatch) *NullableDatastoreEqualsMatch {
	return &NullableDatastoreEqualsMatch{value: val, isSet: true}
}

func (v NullableDatastoreEqualsMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreEqualsMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


