/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreFieldSelector } from './DatastoreFieldSelector';
import {
    DatastoreFieldSelectorFromJSON,
    DatastoreFieldSelectorFromJSONTyped,
    DatastoreFieldSelectorToJSON,
} from './DatastoreFieldSelector';
import type { DatastoreStartsWithMatch } from './DatastoreStartsWithMatch';
import {
    DatastoreStartsWithMatchFromJSON,
    DatastoreStartsWithMatchFromJSONTyped,
    DatastoreStartsWithMatchToJSON,
} from './DatastoreStartsWithMatch';
import type { DatastoreContainsMatch } from './DatastoreContainsMatch';
import {
    DatastoreContainsMatchFromJSON,
    DatastoreContainsMatchFromJSONTyped,
    DatastoreContainsMatchToJSON,
} from './DatastoreContainsMatch';
import type { DatastoreEqualsMatch } from './DatastoreEqualsMatch';
import {
    DatastoreEqualsMatchFromJSON,
    DatastoreEqualsMatchFromJSONTyped,
    DatastoreEqualsMatchToJSON,
} from './DatastoreEqualsMatch';
import type { DatastoreIntersectsMatch } from './DatastoreIntersectsMatch';
import {
    DatastoreIntersectsMatchFromJSON,
    DatastoreIntersectsMatchFromJSONTyped,
    DatastoreIntersectsMatchToJSON,
} from './DatastoreIntersectsMatch';

/**
 * 
 * @export
 * @interface DatastoreFilter
 */
export interface DatastoreFilter {
    /**
     * All condition returns all objects.
     * @type {object}
     * @memberof DatastoreFilter
     */
    all?: object;
    /**
     * Contains condition returns all objects where the field(s) values contain a particular string or slice element.
     * @type {DatastoreContainsMatch}
     * @memberof DatastoreFilter
     */
    contains?: DatastoreContainsMatch;
    /**
     * Equals condition returns objects where value of a field equals (=) to the specified value in the query.
     * @type {DatastoreEqualsMatch}
     * @memberof DatastoreFilter
     */
    equal?: DatastoreEqualsMatch;
    /**
     * Intersects condition returns objects where the slice value of a field intersects with the slice value in the query.
     * @type {DatastoreIntersectsMatch}
     * @memberof DatastoreFilter
     */
    intersects?: DatastoreIntersectsMatch;
    /**
     * 
     * @type {DatastoreFieldSelector}
     * @memberof DatastoreFilter
     */
    selector?: DatastoreFieldSelector;
    /**
     * StartsWith condition returns all objects where the field(s) values start with a particular string.
     * @type {DatastoreStartsWithMatch}
     * @memberof DatastoreFilter
     */
    startsWith?: DatastoreStartsWithMatch;
}

/**
 * Check if a given object implements the DatastoreFilter interface.
 */
export function instanceOfDatastoreFilter(value: object): value is DatastoreFilter {
    return true;
}

export function DatastoreFilterFromJSON(json: any): DatastoreFilter {
    return DatastoreFilterFromJSONTyped(json, false);
}

export function DatastoreFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastoreFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'all': json['all'] == null ? undefined : json['all'],
        'contains': json['contains'] == null ? undefined : DatastoreContainsMatchFromJSON(json['contains']),
        'equal': json['equal'] == null ? undefined : DatastoreEqualsMatchFromJSON(json['equal']),
        'intersects': json['intersects'] == null ? undefined : DatastoreIntersectsMatchFromJSON(json['intersects']),
        'selector': json['selector'] == null ? undefined : DatastoreFieldSelectorFromJSON(json['selector']),
        'startsWith': json['startsWith'] == null ? undefined : DatastoreStartsWithMatchFromJSON(json['startsWith']),
    };
}

export function DatastoreFilterToJSON(value?: DatastoreFilter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'all': value['all'],
        'contains': DatastoreContainsMatchToJSON(value['contains']),
        'equal': DatastoreEqualsMatchToJSON(value['equal']),
        'intersects': DatastoreIntersectsMatchToJSON(value['intersects']),
        'selector': DatastoreFieldSelectorToJSON(value['selector']),
        'startsWith': DatastoreStartsWithMatchToJSON(value['startsWith']),
    };
}

