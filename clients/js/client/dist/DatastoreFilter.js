'use strict';

var DatastoreFieldSelector = require('./DatastoreFieldSelector.js');
var DatastoreStartsWithMatch = require('./DatastoreStartsWithMatch.js');
var DatastoreContainsMatch = require('./DatastoreContainsMatch.js');
var DatastoreEqualsMatch = require('./DatastoreEqualsMatch.js');
var DatastoreIntersectsMatch = require('./DatastoreIntersectsMatch.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Singulatron
 * AI management and development platform.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Check if a given object implements the DatastoreFilter interface.
 */
function instanceOfDatastoreFilter(value) {
    return true;
}
function DatastoreFilterFromJSON(json) {
    return DatastoreFilterFromJSONTyped(json);
}
function DatastoreFilterFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'all': json['all'] == null ? undefined : json['all'],
        'contains': json['contains'] == null ? undefined : DatastoreContainsMatch.DatastoreContainsMatchFromJSON(json['contains']),
        'equal': json['equal'] == null ? undefined : DatastoreEqualsMatch.DatastoreEqualsMatchFromJSON(json['equal']),
        'intersects': json['intersects'] == null ? undefined : DatastoreIntersectsMatch.DatastoreIntersectsMatchFromJSON(json['intersects']),
        'selector': json['selector'] == null ? undefined : DatastoreFieldSelector.DatastoreFieldSelectorFromJSON(json['selector']),
        'startsWith': json['startsWith'] == null ? undefined : DatastoreStartsWithMatch.DatastoreStartsWithMatchFromJSON(json['startsWith']),
    };
}
function DatastoreFilterToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'all': value['all'],
        'contains': DatastoreContainsMatch.DatastoreContainsMatchToJSON(value['contains']),
        'equal': DatastoreEqualsMatch.DatastoreEqualsMatchToJSON(value['equal']),
        'intersects': DatastoreIntersectsMatch.DatastoreIntersectsMatchToJSON(value['intersects']),
        'selector': DatastoreFieldSelector.DatastoreFieldSelectorToJSON(value['selector']),
        'startsWith': DatastoreStartsWithMatch.DatastoreStartsWithMatchToJSON(value['startsWith']),
    };
}

exports.DatastoreFilterFromJSON = DatastoreFilterFromJSON;
exports.DatastoreFilterFromJSONTyped = DatastoreFilterFromJSONTyped;
exports.DatastoreFilterToJSON = DatastoreFilterToJSON;
exports.instanceOfDatastoreFilter = instanceOfDatastoreFilter;
